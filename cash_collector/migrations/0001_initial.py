# Generated by Django 5.0.4 on 2024-05-04 16:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
	initial = True

	dependencies = [
		("auth", "0012_alter_user_first_name_max_length"),
	]

	operations = [
		migrations.CreateModel(
			name="Customer",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
					),
				),
				("name", models.CharField(max_length=100)),
				("address", models.TextField()),
				(
					"phone",
					models.CharField(help_text="Stores the phone number of the customer.", max_length=15),
				),
				(
					"email",
					models.EmailField(help_text="Stores the email address of the customer.", max_length=254),
				),
			],
		),
		migrations.CreateModel(
			name="Task",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
					),
				),
				(
					"amount_due",
					models.DecimalField(
						decimal_places=2,
						help_text="Stores the amount of money that is due for the task.",
						max_digits=10,
					),
				),
				(
					"amount_due_at",
					models.DateTimeField(help_text="Stores the date and time when the amount is due."),
				),
				(
					"is_collected",
					models.BooleanField(
						default=False, help_text="Indicates whether the task is collected or not."
					),
				),
				(
					"customer",
					models.ForeignKey(
						on_delete=django.db.models.deletion.CASCADE,
						related_name="tasks",
						to="cash_collector.customer",
					),
				),
			],
		),
		migrations.CreateModel(
			name="User",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
					),
				),
				("password", models.CharField(max_length=128, verbose_name="password")),
				("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
				(
					"is_superuser",
					models.BooleanField(
						default=False,
						help_text="Designates that this user has all permissions without explicitly assigning them.",
						verbose_name="superuser status",
					),
				),
				(
					"username",
					models.CharField(
						error_messages={"unique": "A user with that username already exists."},
						help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
						max_length=150,
						unique=True,
						validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
						verbose_name="username",
					),
				),
				("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
				("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
				("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
				(
					"is_staff",
					models.BooleanField(
						default=False,
						help_text="Designates whether the user can log into this admin site.",
						verbose_name="staff status",
					),
				),
				(
					"is_active",
					models.BooleanField(
						default=True,
						help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
						verbose_name="active",
					),
				),
				(
					"date_joined",
					models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined"),
				),
				("is_manager", models.BooleanField(default=False)),
				(
					"is_frozen",
					models.BooleanField(
						default=False,
						help_text="Indicates whether the user (CashCollector) is frozen or not.",
					),
				),
				(
					"groups",
					models.ManyToManyField(
						blank=True,
						help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
						related_name="cash_collector_user_set",
						related_query_name="user",
						to="auth.group",
						verbose_name="groups",
					),
				),
				(
					"user_permissions",
					models.ManyToManyField(
						blank=True,
						help_text="Specific permissions for this user.",
						related_name="cash_collector_user_set",
						related_query_name="user",
						to="auth.permission",
						verbose_name="user permissions",
					),
				),
			],
			options={
				"verbose_name": "user",
				"verbose_name_plural": "users",
				"abstract": False,
			},
			managers=[
				("objects", django.contrib.auth.models.UserManager()),
			],
		),
		migrations.CreateModel(
			name="Transaction",
			fields=[
				(
					"id",
					models.BigAutoField(
						auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
					),
				),
				(
					"amount",
					models.DecimalField(
						decimal_places=2,
						help_text="Stores the amount of money that was transacted.",
						max_digits=10,
					),
				),
				("timestamp", models.DateTimeField(auto_now_add=True)),
				(
					"task",
					models.ForeignKey(
						on_delete=django.db.models.deletion.CASCADE,
						related_name="transactions",
						to="cash_collector.task",
					),
				),
				(
					"collector",
					models.ForeignKey(
						on_delete=django.db.models.deletion.CASCADE,
						related_name="transactions_collected",
						to="cash_collector.user",
					),
				),
				(
					"manager",
					models.ForeignKey(
						on_delete=django.db.models.deletion.CASCADE,
						related_name="transactions_paid",
						to="cash_collector.user",
					),
				),
			],
		),
		migrations.AddField(
			model_name="task",
			name="collector",
			field=models.ForeignKey(
				on_delete=django.db.models.deletion.CASCADE, related_name="tasks", to="cash_collector.user"
			),
		),
	]
